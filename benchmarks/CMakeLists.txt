include(BenchmarkMacros)

set(NO_AUTOVEC "-fno-tree-vectorize")
check_cxx_compiler_flag(${NO_AUTOVEC} check_compiler_flag_no_autovect_gcc)
if(NOT check_compiler_flag_no_autovect_gcc)
   set(NO_AUTOVEC "-no-vec")
   check_cxx_compiler_flag(${NO_AUTOVEC} check_compiler_flag_no_autovect_icc)
   if(NOT check_compiler_flag_no_autovect_icc)
      message(STATUS "Missing flag to disable autovectorization in the compiler")
      SET(NO_AUTOVEC)
   endif(NOT check_compiler_flag_no_autovect_icc)
endif(NOT check_compiler_flag_no_autovect_gcc)

set(NO_PREFETCH "-fno-prefetch-loop-arrays")
check_cxx_compiler_flag(${NO_PREFETCH} check_compiler_flag_no_prefetch_gcc)
if(NOT check_compiler_flag_no_prefetch_gcc)
   message(WARNING "Missing flag to disable prefetching")
   set(NO_PREFETCH "")
endif()

find_file(HAVE_SYS_MMAN sys/mman.h)
if(HAVE_SYS_MMAN)
   set(USE_MLOCK_IN_BENCHMARKS TRUE CACHE BOOL "Use memlock to get more reliable results in the benchmarks.")
   if(NOT USE_MLOCK_IN_BENCHMARKS)
      add_definitions(-DVC_BENCHMARK_NO_MLOCK)
   endif(NOT USE_MLOCK_IN_BENCHMARKS)
else(HAVE_SYS_MMAN)
   add_definitions(-DVC_BENCHMARK_NO_MLOCK)
endif(HAVE_SYS_MMAN)
mark_as_advanced(HAVE_SYS_MMAN)

set(FAST_MATH_BENCHMARK FALSE CACHE BOOL "Use floating point math shortcuts. Might not be IEEE compliant!")
if(FAST_MATH_BENCHMARK)
   if(COMPILER_IS_GCC OR COMPILER_IS_OPEN64)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ffast-math")
   elseif(COMPILER_IS_INTEL)
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fp-model fast=2")
   elseif(COMPILER_IS_MSVC)
      message(WARNING "Missing flag for MSVC to implement fast-math")
   endif()
endif(FAST_MATH_BENCHMARK)

add_library(cpuset STATIC cpuset.c)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
   set(REALTIME_BENCHMARKS FALSE CACHE BOOL "Use SCHED_FIFO priority to give benchmarks highest priority, achieving less jitter in the results.")
   if(REALTIME_BENCHMARKS)
      add_executable(rtwrapper rtwrapper.cpp)
      add_definitions(-DSCHED_FIFO_BENCHMARKS)
      add_custom_command(TARGET rtwrapper POST_BUILD
         COMMAND sudo chown root rtwrapper
         COMMAND sudo chmod +s rtwrapper
         WORKING_DIRECTORY "${CMAKE_CURRENT_BUILD_DIR}"
         COMMENT "Making the rtwrapper suid root"
         )
   endif(REALTIME_BENCHMARKS)
endif(CMAKE_SYSTEM_NAME STREQUAL "Linux")

vc_add_benchmark(arithmetics)
vc_add_benchmark(flops)
vc_add_benchmark(gather VC_NO_BSF_LOOPS VC_NO_GATHER_TRICKS VC_SLOWDOWN_GATHER)
vc_add_benchmark(mask)
vc_add_benchmark(compare VC_DISABLE_PTEST)
vc_add_benchmark(math)
vc_add_benchmark(memio)
add_target_property(memio_scalar_benchmark COMPILE_FLAGS "${NO_AUTOVEC} ${NO_PREFETCH}")
if(USE_SSE2)
   add_target_property(memio_sse_benchmark COMPILE_FLAGS ${NO_PREFETCH})
endif()
if(USE_AVX)
   add_target_property(memio_avx_benchmark COMPILE_FLAGS ${NO_PREFETCH})
endif()
vc_add_benchmark(dhryrock)
vc_add_benchmark(whetrock)

add_executable(flops_autovect autoflops.cpp benchmark.cpp)
target_link_libraries(flops_autovect Vc ${LIBS} CpuId)
add_executable(flops_noautovect autoflops.cpp benchmark.cpp)
check_cxx_compiler_flag("-fno-tree-vectorize" check_compiler_flag_no_autovect_gcc)
add_target_property(flops_noautovect COMPILE_FLAGS ${NO_AUTOVEC})
target_link_libraries(flops_noautovect Vc ${LIBS} CpuId)

add_executable(sort_benchmark sort.cpp benchmark.cpp)
target_link_libraries(sort_benchmark Vc ${LIBS} CpuId)
add_target_property(sort_benchmark OUTPUT_NAME sort)
add_custom_target("run_sort_benchmark" sort_benchmark DEPENDS sort_benchmark COMMENT "Running sort")
add_target_property("run_sort_benchmark" EXCLUDE_FROM_DEFAULT_BUILD 1)
add_dependencies(benchmarks "run_sort_benchmark")

vc_generate_plots(arithmetics)
vc_generate_plots(flops)
vc_generate_plots(gather VC_NO_BSF_LOOPS VC_NO_GATHER_TRICKS)
vc_generate_plots(mask)
vc_generate_plots(compare VC_DISABLE_PTEST)
vc_generate_plots(math)
vc_generate_plots(memio)

add_executable(constants constants.cpp benchmark.cpp)
target_link_libraries(constants Vc ${LIBS} CpuId)

if(QT4_FOUND)
   include(${QT_USE_FILE})
   include_directories(${CMAKE_CURRENT_BINARY_DIR})
   qt4_generate_moc(../examples/mandelbrot/mandel.h moc_mandel.cpp)

   set(SOURCES mandelbrot.cpp ../examples/mandelbrot/mandel.cpp
      ${CMAKE_CURRENT_BINARY_DIR}/moc_mandel.cpp)

   add_executable(mandelbrotbench_sse ${SOURCES})
   add_target_property(mandelbrotbench_sse COMPILE_FLAGS "-DVC_IMPL=SSE")
   target_link_libraries(mandelbrotbench_sse ${QT_LIBRARIES} Vc)

   add_executable(mandelbrotbench_scalar ${SOURCES})
   add_target_property(mandelbrotbench_scalar COMPILE_FLAGS "-DVC_IMPL=Scalar")
   target_link_libraries(mandelbrotbench_scalar ${QT_LIBRARIES} Vc)

   if(LARRABEE_FOUND)
      add_executable(mandelbrotbench_lrb ${SOURCES})
      add_target_property(mandelbrotbench_lrb COMPILE_FLAGS "-DVC_IMPL=LRBni")
      target_link_libraries(mandelbrotbench_lrb ${QT_LIBRARIES} Vc)
   endif()

   if(USE_AVX)
      add_executable(mandelbrotbench_avx ${SOURCES})
      add_target_property(mandelbrotbench_avx COMPILE_FLAGS "-DVC_IMPL=AVX")
      target_link_libraries(mandelbrotbench_avx ${QT_LIBRARIES} Vc)
   endif()
endif()

configure_file(benchmark-all.sh benchmark-all.sh @ONLY)

if(CMAKE_COMPILER_IS_GNUCXX AND _gcc_version STREQUAL "4.6.0")
   add_target_property(dhryrock_avx_benchmark EXCLUDE_FROM_ALL TRUE)
endif()
